<?php

namespace App\Http\Controllers;

use Exception;
use Illuminate\Http\Request;
use Http;
use Laravel\Pail\ValueObjects\Origin\Console;
use Storage;
use Str;
use Illuminate\Support\Facades\Session;
use App\Models\ChatBot;
use Smalot\PdfParser\Parser;
class AIchatController extends Controller
{

    public function sendMessage(Request $request)
    {
        $dataURL = [];
        $dataPDF = [];
        $pdfContent = "";
        $Pdfs = Chatbot::whereHas("category_Chatbot", function ($query) {
            $query->where("CategoryName", "PDF");
        })->get();
        $Urls = ChatBot::whereHas("category_Chatbot", function ($query) {
            $query->where("CategoryName", "URL");
        })->get();
        \Log::info("url", $dataURL);
        try {
            \Log::info('sendMessage:', $request->all());
            $content = '';
            $textFromWeb = '';
            foreach ($Urls as $url) {
                if ($url->Content == null) {
                    $urlToGet = $url->LinkURL;
                    $selector = $url->SelectorURL;
                    if (!filter_var($urlToGet, FILTER_VALIDATE_URL)) {
                        continue;
                    }

                    $response = Http::get("https://node-crawler-gw8b.onrender.com/scrape", [
                        'url' => $urlToGet,
                        'selector' => $selector,
                    ]);

                    if ($response->successful()) {
                        $content = $response->json('content');
                        \Log::info(" n·ªôi dung t·ª´ $urlToGet");
                        $textFromWeb .= trim($content) . "\n\n";
                        \Log::info("n·ªôi dung c·ªßa vƒÉn b·∫£n" . $textFromWeb);
                    } else {
                        \Log::warning("L·ªói crawl $urlToGet", [
                            'response' => $response->body()
                        ]);
                    }
                    if (empty($textFromWeb)) {
                        return response()->json([
                            'error' => 'Kh√¥ng th·ªÉ l·∫•y n·ªôi dung t·ª´ c√°c URL ƒë√£ cung c·∫•p.'
                        ], 500);
                    }
                    $ChatDocument = Chatbot::find($url->ChatbotID);
                    $ChatDocument->update([
                        "Content" => $textFromWeb,
                    ]);
                } else {
                    $content = $url->Content;
                }
            }
            foreach ($Pdfs as $pdf) {
                $pdfName = $pdf->DocumentName;
                $pdfcontent = $this->Pdfcontent($pdf->File);
                if ($pdfcontent) {
                    $pdfContent .= "**{$pdfName}**:\n" . trim($pdfcontent["data"]) . "\n\n";
                    \Log::info("D∆∞∆°ng dan file:". $pdfContent);
                } else {
                    \Log::warning("Kh√¥ng t·ªìn t·∫°i file PDF:", ["file" => $pdfName]);
                }

            }
            //Gi·ªõi h·∫°n ƒë·ªô d√†i
            $textFromWeb = \Str::limit($textFromWeb, 15000);

            // Chu·∫©n b·ªã prompt
            $userMessage = $request->input('message', 'Gi·∫£i th√≠ch n·ªôi dung.');
            $prompt = <<<PROMPT
            B·∫°n l√† trafficbot m·ªôt tr·ª£ l√Ω ·∫£o th√¢n thi·ªán, ƒë∆∞·ª£c t√≠ch h·ª£p tr√™n website cung c·∫•p th√¥ng tin v·ªÅ **Lu·∫≠t Giao th√¥ng ƒê∆∞·ªùng b·ªô Vi·ªát Nam**.

            **Nhi·ªám v·ª• c·ªßa b·∫°n**:
            - Gi·∫£i th√≠ch lu·∫≠t r√µ r√†ng, ch√≠nh x√°c, d·ªÖ hi·ªÉu cho ng∆∞·ªùi d√¢n.
            - Tr·∫£ l·ªùi ng·∫Øn g·ªçn, ƒë√∫ng tr·ªçng t√¢m, tr√°nh l·∫∑p l·∫°i n·ªôi dung ngu·ªìn.

            **H∆∞·ªõng d·∫´n tr·∫£ l·ªùi**:

            1. Khi ng∆∞·ªùi d√πng g·ª≠i l·ªùi ch√†o (v√≠ d·ª•: "Ch√†o b·∫°n", "Hi", "C√≥ ai kh√¥ng"):
            ‚Üí Ch·ªâ c·∫ßn ch√†o l·∫°i ng·∫Øn g·ªçn, **duy nh·∫•t 1 l·∫ßn ƒë·∫ßu ti√™n**,
            -  khi ng∆∞·ªùi d√πng ƒëi th·∫±ng v√†o c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn vi·ªác ch√†o h·ªèi 
            ‚Üí h√£y ch√†o m·ªôt c√°ch ng·∫Øn g·ªçn nh·∫•t v√† ƒëi th·∫≥ng v√†o v·∫•n ƒë·ªÅ c√¢u h·ªèi

            2. N·∫øu ng∆∞·ªùi d√πng h·ªèi th·∫≥ng v·ªÅ lu·∫≠t:
            ‚Üí B·ªè qua ph·∫ßn ch√†o, **ƒëi th·∫≥ng v√†o tr·∫£ l·ªùi**.

            3. Tr·∫£ l·ªùi ng·∫Øn g·ªçn, r√µ r√†ng:
            - D√πng g·∫°ch ƒë·∫ßu d√≤ng n·∫øu c·∫ßn chia √Ω.
            - H·∫°n ch·∫ø l·∫∑p l·∫°i to√†n b·ªô vƒÉn b·∫£n lu·∫≠t.
            - Kh√¥ng c·∫ßn d·∫´n l·∫°i ngu·ªìn, kh√¥ng d√πng ‚Äúd∆∞·ªõi ƒë√¢y l√†‚Ä¶‚Äù hay ‚Äútheo b·∫°n cung c·∫•p‚Ä¶‚Äù.

            4. N·∫øu c√¢u h·ªèi li√™n quan ƒë·∫øn **x·ª≠ ph·∫°t, ƒëi·ªÉm b·∫±ng l√°i**:
            - Ghi r√µ m·ª©c ph·∫°t theo t·ª´ng lo·∫°i ph∆∞∆°ng ti·ªán.
            - N·∫øu c√≥ m·ª©c ph·∫°t cao h∆°n khi g√¢y tai n·∫°n, c·∫ßn ph√¢n bi·ªát r√µ.

            5. Kh√¥ng ph√°n x√©t ng∆∞·ªùi d√πng:
            - Kh√¥ng n√≥i ‚ÄúB·∫°n ƒë√£ vi ph·∫°m‚Äù, thay v√†o ƒë√≥: ‚ÄúH√†nh vi n√†y b·ªã xem l√† vi ph·∫°m theo quy ƒë·ªãnh hi·ªán h√†nh‚Ä¶‚Äù
            
            6. Khi ng∆∞·ªùi d√πng c·∫£m ∆°n hay n√≥i nh·ªØng c√¢u k·∫øt th√∫c cu·ªôc h·ªôi tho·∫°i (v√≠ d·ª•: "ok", "ƒë∆∞·ª£c", "t·ªët", "c·∫£m ∆°n", "t·∫°m bi·ªát", "bye", "th·∫ø nh√©"...), h√£y ph·∫£n h·ªìi m·ªôt c√°ch th√¢n thi·ªán v√† g·∫ßn g≈©i, d∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë v√≠ d·ª• v√† h√£y thay theo ng·ªØ c·∫£nh:

            ‚Üí *"C·∫£m ∆°n b·∫°n ƒë√£ tr√≤ chuy·ªán! Ch√∫c b·∫°n l√°i xe an to√†n nh√© üöóüí®"*

            ‚Üí *"R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n. H·∫πn g·∫∑p l·∫°i! üëã"*

            ‚Üí *"OK, n·∫øu c·∫ßn h·ªó tr·ª£ th√™m, c·ª© nh·∫Øn m√¨nh nh√©!"*

            ‚Üí *"T·∫°m bi·ªát nh√©, m√¨nh lu√¥n s·∫µn s√†ng n·∫øu b·∫°n c·∫ßn!"*

            ‚Üí *"Ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh! C√≥ th·∫Øc m·∫Øc g√¨ c·ª© quay l·∫°i h·ªèi nh√© üòä"*

            ---


            7. tr·∫£ l·ªùi c√°c c√¢u  h·ªèi li√™n quan ƒë·∫øn m·∫πo √¥n thi gi·∫•y ph√©p
            - Ch·ªâ chia s·∫ª **m·ªôt ph·∫ßn c√°c m·∫πo th√¥ng d·ª•ng**, g·ª£i √Ω ng∆∞·ªùi h·ªçc n√™n ƒë·ªçc lu·∫≠t k·ªπ ƒë·ªÉ hi·ªÉu r√µ.
            - N·∫øu c√≥ th·ªÉ, chia n·ªôi dung b·∫±ng c√°c d·∫•u g·∫°ch ƒë·∫ßu d√≤ng ƒë·ªÉ ng∆∞·ªùi ƒë·ªçc d·ªÖ nh·ªõ.
            - chia s·∫Ω 3 ƒë·∫øn 4 m·∫πo v√† n·∫øu ng∆∞·ªùi d√πng mu·ªën bi·∫øt th√™m th√¨ h√£y cho ng∆∞·ªùi d√πng bi·∫øt.
            ---
            **L∆∞u √Ω trong prompt**:
            - Kh√¥ng d√πng t·ª´ nh∆∞ "ch·ªçn lu√¥n" m·ªôt c√°ch c·ª©ng nh·∫Øc.
            - Kh√¥ng li·ªát k√™ h·∫øt t·∫•t c·∫£ c√°c m·∫πo ƒë·ªÉ tr√°nh d√†i v√† kh√¥ c·ª©ng.
            - N√™n khuy·∫øn kh√≠ch ng∆∞·ªùi h·ªçc ƒë·ªçc lu·∫≠t.


            **c√°c ngu·ªìn th√¥ng tin t·ª´ h·ªá th·ªëng:**
            $textFromWeb
            
            **Ngu·ªìn th√¥ng tin t·ª´ PDF**
            $pdfContent

            **Ngu·ªìn n·ªôi dung b·ªï sung (n·∫øu c√≥):**
            $content

            ---

             **C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng**: "$userMessage"

            ---

            ‚úçÔ∏è H√£y tr·∫£ l·ªùi nh∆∞ m·ªôt chuy√™n gia lu·∫≠t giao th√¥ng, **tr·ª±c ti·∫øp ‚Äì d·ªÖ hi·ªÉu ‚Äì ƒë√∫ng tr·ªçng t√¢m**:
            PROMPT;



            //G·ªçi Gemini API
            $apiKey = env('GEMINI_API_KEY');
            $url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent";

            $geminiResponse = Http::withHeaders([
                'Content-Type' => 'application/json',
                'X-goog-api-key' => $apiKey,
            ])->post($url, [
                        'contents' => [
                            [
                                'parts' => [
                                    ['text' => $prompt],
                                ],
                            ],
                        ],
                    ]);

            if (!$geminiResponse->successful()) {
                \Log::error('Gemini API error', [
                    'status' => $geminiResponse->status(),
                    'body' => $geminiResponse->body(),
                ]);
                return response()->json([
                    'error' => 'L·ªói khi g·ªçi Gemini API.',
                    'body' => $geminiResponse->body(),
                ], 500);
            }

            //Tr·∫£ k·∫øt qu·∫£ v·ªÅ
            $data = $geminiResponse->json();
            $reply = data_get($data, 'candidates.0.content.parts.0.text', 'Kh√¥ng c√≥ ph·∫£n h·ªìi.');

            $history = Session::get('chat_history', []);
            $history[] = [
                'user' => $userMessage,
                'model' => $reply,
            ];

            // Gi·ªõi h·∫°n t·ªëi ƒëa 50 ƒëo·∫°n h·ªôi tho·∫°i
            if (count($history) > 50) {
                $history = array_slice($history, -50);
            }

            session()->put('chat_history', $history);
            \Log::info("Full chat history", $history);
            return response()->json(['reply' => $reply]);
        } catch (\Throwable $e) {
            \Log::error('sendMessage Exception', [
                'message' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
            ]);
            return response()->json([
                'error' => 'L·ªói n·ªôi b·ªô server.',
                'message' => $e->getMessage(),
            ], 500);
        }
    }
    private function Pdfcontent($fileName)
    {
        \Log::info("t√™n file: " . $fileName);
        if (!Storage::disk("public")->exists("filePDF/".$fileName)) {
            \Log::warning("File PDF kh√¥ng t·ªìn t·∫°i");
            return null;
        }
        try {
            $filePath = storage_path("app/public/filePDF/".$fileName);
            $parser = new Parser();
            $pdf = $parser->parseFile($filePath);
            $content = $pdf->getText();
            return [
                "data" => $content,
            ];
        } catch (Exception $e) {
            \Log::error("l·ªói khi ƒë·ªçc PDF", ["message" => $e->getMessage()]);
            return null;
        }
    }
}
